extends ../_layout

block content
    section.container.mx-auto(x-data="emblemList")
        div(class="sm:flex sm:items-center sm:justify-between")
            div
                .flex.items-center.gap-x-3
                    h2.text-lg.font-medium.text-gray-800(class="dark:text-white") Emblems
                    span.px-3.py-1.text-xs.text-blue-600.bg-blue-100.rounded-full(class="dark:bg-gray-800 dark:text-blue-400")#emblems-count 200 emblems

        .hidden.flex.items-center.mt-6.text-center.border.rounded-lg.h-96(class="dark:border-gray-700")#no-emblems
            .flex.flex-col.w-full.max-w.sm.px-4.mx-auto
                .p-3.mx-auto.text-blue-500.bg-blue-100.rounded-full(class="dark:bg-gray-800")
                    i.w-6.h-6.fas.fa-search
                h1.mt-3.text-lg.text-gray-800(class="dark:text-white") No emblems found
                p.mt-2.text-gray-500(class="dark:text-gray-400") Please try again

        .flex.flex-col.mt-6.min-h-96#emblems-table-layout
            .overflow-x-auto(class="-my-2 md:-mx-6 lg:-mx-8")
                .inline-block.min-w-full.py-2.align-middle(class="md:px-6 lg:px-8")
                    .overflow-hidden.border.border-gray-200(class="dark:border-gray-700 md:rounded-lg")
                        table.min-w-full.divide-y.divide-gray-200(class="dark:divide-gray-700")#emblems-table
                            thead.bg-gray-50(class="dark:bg-gray-800")
                                tr
                                    th(class="py-3.5 rtl:text-right dark:text-gray-400" width="100" scope="col").px-4.text-sm.font-small.text-left.text-gray-500
                                        span(style="visibility:hidden") Image
                                    th(class="rtl:text-right dark:text-gray-400 py-3.5" scope="col").text-sm.font-small.text-left.text-gray-500
                                        button.flex.items-center.gap-x-3(class="focus:outline-none")
                                            span Name
                                    th(class="rtl:text-right dark:text-gray-400 py-3.5" scope="col").px-12.text-sm.font-small.text-start.text-gray-500
                                        span Attributes
                                    th(class="rtl:text-right dark:text-gray-400 py-3.5" scope="col").px-12.text-sm.font-small.text-left.text-gray-500
                            tbody.bg-white.divide-y.divide-gray-200(class="dark:divide-gray-700 dark:bg-gray-900")
                                template(x-for="emblem in filteredEmblems" :key="emblem._id")
                                    tr
                                        td.text-sm.font-medium.whitespace-nowrap.text-gray-800.px-4(class="dark:text-white")
                                            img(:src="emblem.image" alt="emblem" class="w-10 h-10 rounded-full")
                                        td.text-sm.font-medium.whitespace-nowrap.text-gray-800(class="dark:text-white" x-text="emblem.name")
                                        td.px-12.py-4.text-sm.whitespace-nowrap
                                            .grid.gap-y-2
                                                template(x-for="attr in emblem.attributes" :key="attr._id || attr.name + attr.value")
                                                    span
                                                        span(x-text="attr.name + ' : '" class="dark:text-white")
                                                        span(x-text="attr.value")
                                        td.px-12.py-4.text-sm.whitespace-nowrap
                                            btn.btn.btn-ghost.text-gray-500.transition-colors.duration-200(class="dark:hover:text-blue-500 dark:text-gray-300 hover:text-blue-500 focus:outline-none" @click="editEmblem(emblem)").w-12.text-center Edit

        dialog.modal#editModal
            .modal-box
                form(method="dialog" @submit.prevent="saveEmblem")
                    button.btn.btn-sm.btn-circle.btn-ghost.absolute.right-2.top-2(type="button" @click="editModal.close()") X
                    h3.text-lg.font-bold Edit Emblem
                    .py-4.grid.grid-cols-2.gap-x-6
                        .mb-4.col-span-2
                            fieldset.fieldset.w-full
                                legend.fieldset-legend Name
                                input.input.w-full.mt-2.input-primary(type="text" x-model="form_data.name" )

                        .mb-4.col-span-2
                            fieldset.fieldset.w-full
                                legend.fieldset-legend Attributes
                                .flex.flex-col.gap-2.mt-2
                                    template(x-for="(attribute, index) in form_data.attributes" :key="index")
                                        .flex.items-center.gap-2
                                            input.input.flex-1.input-sm.input-bordered(type="text" placeholder="Attribute Name" x-model="attribute.name")
                                            input.input.flex-1.input-sm.input-bordered(type="text" placeholder="Attribute Value" x-model="attribute.value")
                                            button.btn.btn-sm.btn-square.btn-error(type="button" @click="removeAttribute(index)")
                                                i.fas.fa-minus
                                    button.btn.btn-sm.btn-success.mt-2(type="button" @click="addAttribute")
                                        i.fas.fa-plus 
                                        |  Add Attribute

                    .modal-action
                        button.btn.btn-primary(type="submit") Save Changes

block scripts
    script.
        document.addEventListener('alpine:init', () => {
            Alpine.data('emblemList', () => ({
                emblems: [],
                filteredEmblems: [],
                isFormOpen: false,
                openDropdown: null,
                isOpen: false,
                form_data: {
                    _id: '',
                    name: '',
                    attributes: [], 
                    image: ''
                },
                init() {
                    this.loadEmblems()
                },

                async loadEmblems(){
                    showLoading()

                    const [error, response] = await axios.get[Symbol.result]("/dash/emblems/list", {})

                    hideLoading()

                    if(error) {
                        return showAlert("error", "Something happened. Please try again")
                    }

                    this.emblems = response.data
                    this.filteredEmblems = this.emblems
                    this.renderEmblems()
                },

                async renderEmblems(){
                    if(this.filteredEmblems.length > 0){
                        document.getElementById("emblems-table-layout").classList.remove("hidden")
                        document.getElementById("no-emblems").classList.add("hidden")
                    }else{
                        document.getElementById("emblems-table-layout").classList.add("hidden")
                        document.getElementById("no-emblems").classList.remove("hidden")
                    }
                    document.getElementById("emblems-count").innerHTML = this.filteredEmblems.length + (this.filteredEmblems.length == 1 ? " emblem" : " emblems")
                },

                editEmblem(emblem) {
                    this.form_data = JSON.parse(JSON.stringify(emblem));
                    if (!this.form_data.attributes) {
                        this.form_data.attributes = [];
                    }
                    editModal.showModal();
                },

                addAttribute() {
                    this.form_data.attributes.push({ name: '', value: '' });
                },

                removeAttribute(index) {
                    this.form_data.attributes.splice(index, 1);
                },

                async saveEmblem() {
                    showLoading();
                    try {
                        const response = await axios.post(`/dash/emblems/update/${this.form_data._id}`, this.form_data);

                        if (response.data.success) {
                            showAlert("success", response.data.message);
                            editModal.close();
                            await this.loadEmblems(); 
                        } else {
                            showAlert("error", response.data.message);
                        }
                    } catch (error) {
                        console.error("Error saving emblem:", error.response ? error.response.data : error.message);
                        showAlert("error", "Something happened. Please try again");
                    } finally {
                        hideLoading();
                    }
                },

                async deleteEmblem(emblemId){
                    showModal("Are you sure?", "The emblem cannot be accessed once deleted.", "Delete", async () => {
                        showLoading();
                        try{
                            const response = await axios.delete(`/emblems/delete/${emblemId}`)

                            if(response.data.success)
                                showAlert("success", response.data.message)
                            else
                                showAlert("error", response.data.message)
                        }catch (error){
                            console.error("Error deleting emblem:", error.message)
                            showAlert("error", "Something happened. Please try again")
                        } finally {
                            hideLoading(); 
                        }
                        await this.loadEmblems() 
                    })
                },
            }))
        })