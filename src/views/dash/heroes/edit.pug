extends ../_layout

block content
   section.container.mx-auto(x-data="heroData")
      div(class="sm:flex sm:items-center sm:justify-between")
         div
            .flex.items-center.gap-x-3
               div 
                  .flex.items-center
                     .shrink-0
                        img(:src=`hero.thumbnail`, class="w-12 h-12 object-cover rounded-lg" id="thumbnail")
               h2.text-lg.font-medium.text-gray-800(class="dark:text-white" x-text="hero.name")

      div.grid.gap-4.grid-cols-1.mt-4(class="lg:grid-cols-3 md:grid-cols-2")
         div 
            p.text-md.text-gray-800(class="dark:text-white") Primary Role
            select.block.w-full.px-4.py-3.appearance-none.text-sm.text-gray-700.bg-white.border.border-gray-200.rounded-md.mt-1(class="focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" aria-label="Role" x-model="hero.role.primary").capitalize
               option(hidden value="") Select a Role
               template(x-for="role in roles")
                  option(:value="role" x-text="role").capitalize 
         div   
            p.text-md.text-gray-800(class="dark:text-white") Secondary Role
            select.block.w-full.px-4.py-3.appearance-none.text-sm.text-gray-700.bg-white.border.border-gray-200.rounded-md.mt-1(class="focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" aria-label="Role" x-model="hero.role.secondary").capitalize
               option(hidden value="") Select a Role
               template(x-for="role in roles")
                  option(:value="role" x-text="role").capitalize 
         div
            p.text-md.text-gray-800(class="dark:text-white") Resource
            select.block.w-full.px-4.py-3.appearance-none.text-sm.text-gray-700.bg-white.border.border-gray-200.rounded-md.mt-1(class="focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" aria-label="Role" x-model="hero.resource").capitalize
               option(hidden value="") Select a Resource
               template(x-for="resource in resources")
                  option(:value="resource" x-text="resource").capitalize 
         div 
            p.text-md.text-gray-800(class="dark:text-white") Primary Speciality
            select.block.w-full.px-4.py-3.appearance-none.text-sm.text-gray-700.bg-white.border.border-gray-200.rounded-md.mt-1(class="focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" aria-label="Speciality" x-model="hero.speciality.primary").capitalize
               option(hidden value="") Select a Speciality
               template(x-for="speciality in specialities")
                  option(:value="speciality" x-text="speciality").capitalize 
         div   
            p.text-md.text-gray-800(class="dark:text-white") Secondary Speciality
            select.block.w-full.px-4.py-3.appearance-none.text-sm.text-gray-700.bg-white.border.border-gray-200.rounded-md.mt-1(class="focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" aria-label="Speciality" x-model="hero.speciality.secondary").capitalize
               option(hidden value="") Select a Speciality
               template(x-for="speciality in specialities")
                  option(:value="speciality" x-text="speciality").capitalize 
         div   
            p.text-md.text-gray-800(class="dark:text-white") Attack Type
            select.block.w-full.px-4.py-3.appearance-none.text-sm.text-gray-700.bg-white.border.border-gray-200.rounded-md.mt-1(class="focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" aria-label="Attack Type" x-model="hero.attackType").capitalize
               option(hidden value="") Select Attack Type
               template(x-for="attackType in attackTypes")
                  option(:value="attackType" x-text="attackType").capitalize 
         .col-span-1(class="lg:col-span-3 md:col-span-2")
            p.text-md.text-gray-800(class="dark:text-white") 
               | Description
               //preview
               span.btn.btn-ghost(@click="openTextPreviewModal(hero.description)").ms-5 Preview
            div.block.w-full.px-4.py-3.appearance-none.text-sm.overflow-scroll.resize-y.text-gray-700.bg-white.border.border-gray-200.rounded-md.mt-1(class="focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" row="5" aria-label="Description" contenteditable="true" x-init="$el.innerHTML = hero.description || ` `" @input="updateDescription($event.target, 'description')")
      div.w-full.mt-4(x-data="{openTab: 0, activeClasses:'text-gray-200 bg-blue-700', inactivClasses:'dark:text-gray-200 text-gray-900'}" class="dark:border-gray-900").border.border-gray-200.rounded-md
         .flex.flex-col.flex-warp.rounded-none(class="sm:flex-row dark:bg-gray-900").bg-gray-200.p-2.gap-2.shadow-md
            a.px-6.py-2.text-base.font-medium.rounded-md.shadow-sm.select-none(href="javascript:void(0)" @click="openTab=0" :class="openTab === 0 ? activeClasses : inactivClasses") Ratings
            a.px-6.py-2.text-base.font-medium.rounded-md.shadow-sm.select-none(href="javascript:void(0)" @click="openTab=1" :class="openTab === 1 ? activeClasses : inactivClasses") Skills
            a.px-6.py-2.text-base.font-medium.rounded-md.shadow-sm.select-none(href="javascript:void(0)" @click="openTab=2" :class="openTab === 2 ? activeClasses : inactivClasses") Skins
            a.px-6.py-2.text-base.font-medium.rounded-md.shadow-sm.select-none(href="javascript:void(0)" @click="openTab=3" :class="openTab === 3 ? activeClasses : inactivClasses") Attributes 
            a.px-6.py-2.text-base.font-medium.rounded-md.shadow-sm.select-none(href="javascript:void(0)" @click="openTab=4" :class="openTab === 4 ? activeClasses : inactivClasses") Guides 
            a.px-6.py-2.text-base.font-medium.rounded-md.shadow-sm.select-none(href="javascript:void(0)" @click="openTab=5" :class="openTab === 5 ? activeClasses : inactivClasses") Builds 
         div
            .grid.gap-4.grid-cols-1(class="lg:grid-cols-4 md:grid-cols-2" x-show="openTab === 0").p-4
               div
                  p.text-md.text-gray-800(class="dark:text-white" x-text="'Diffculty - ' + hero.ratings.difficulty")
                  input(type="range" min="1" max="10" id="difficulty" class="w-full" x-model="hero.ratings.difficulty")
               div
                  p.text-md.text-gray-800(class="dark:text-white" x-text="'Offense - ' + hero.ratings.offense")
                  input(type="range" min="1" max="10" id="offense" class="w-full" x-model="hero.ratings.offense")
               div 
                  p.text-md.text-gray-800(class="dark:text-white" x-text="'Crowd Effects - ' + hero.ratings.crowd_effects")
                  input(type="range" min="1" max="10" id="crowd_effects" class="w-full" x-model="hero.ratings.crowd_effects")
               div
                  p.text-md.text-gray-800(class="dark:text-white" x-text="'Durability - ' + hero.ratings.durability")
                  input(type="range" min="1" max="10" id="durability" class="w-full" x-model="hero.ratings.durability")
               div
                  p.text-md.text-gray-800(class="dark:text-white" x-text="'Mobility - ' + hero.ratings.mobility")
                  input(type="range" min="1" max="10" id="mobility" class="w-full" x-model="hero.ratings.mobility")
               div
                  p.text-md.text-gray-800(class="dark:text-white" x-text="'Early Game - ' + hero.ratings.early_game")
                  input(type="range" min="1" max="10" id="early_game" class="w-full" x-model="hero.ratings.early_game")
               div 
                  p.text-md.text-gray-800(class="dark:text-white" x-text="'Mid Game - ' + hero.ratings.mid_game")
                  input(type="range" min="1" max="10" id="mid_game" class="w-full" x-model="hero.ratings.mid_game")
               div
                  p.text-md.text-gray-800(class="dark:text-white" x-text="'Late Game - ' + hero.ratings.late_game")
                  input(type="range" min="1" max="10" id="late_game" class="w-full" x-model="hero.ratings.late_game")
            div(x-show="openTab === 1")
               .div.p-2
                  template(x-for="(skill, index) in hero.skills" :key="index")
                     div.mb-2.border.border-neutral-400.rounded-md(class="dark:border-neutral-900")
                        div(class="cursor-pointer bg-neutral-400 dark:bg-neutral-900" @click="copyText(skill.id)")
                           .flex.shadow-md.rounded-md.p-3.gap-2
                              .flex.items-center
                                 span.text-md(class="dark:text-white text-neutral-800" x-text="skill.id + ' - ' + skill.name")
                              template(x-for="tag in skill.tags")
                                 span.badge.badge-outline.bade-accent(x-text="tag.replace(`_`, ` `)" class="mt-0.5").uppercase
                        div.p-3.w-full
                           .grid.gap-1.grid-cols-1(class="lg:grid-cols-3 md:grid-cols-1")
                              div(class="col-span-2")
                                 .grid.grid-cols-1(class="lg:grid-cols-2 md:grid-cols-2").gap-1
                                    input(type="text" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="skill.name")
                                    select.block.w-full.px-4.py-3.appearance-none.text-sm.text-gray-700.bg-white.border.border-gray-200.rounded-md.mt-1(class="focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="skill.order").capitalize
                                       option(hidden value="") Skill Order
                                       option(value="0") Passive
                                       option(value="1") Skill 1
                                       option(value="2") Skill 2
                                       option(value="3") Skill 3 / Ultimate 1
                                       option(value="4") Skill 4 / Ultimate 2
                                       option(value="5") Special

                                    .flex.items-center.space-x-4
                                       p.text-md.text-gray-800(class="dark:text-white") 
                                          span.btn.btn-ghost(@click="openVideoPreviewModal(skill.video)") Video Preview
                                       input(type="file" class="w-full file-input file-input-bordered file-input-ghost" accept="video/*" @change="handleVideoUpload($event, skill.id)")

                                    .form-control
                                       label.cursor-pointer.label 
                                          span.label-text.ms-5 Unique
                                          input(type="checkbox" check="skill.unique" class="checkbox checkbox-accent" x-model="skill.unique")

                                 p.text-md.text-gray-800(class="dark:text-white") 
                                    | Description
                                    span.btn.btn-ghost(@click="openTextPreviewModal(skill.description)").ms-5 Preview
                                 div.block.w-full.px-4.py-3.appearance-none.text-sm.overflow-scroll.resize-y.text-gray-700.bg-white.border.border-gray-200.rounded-md.mt-1(class="focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" row="5" aria-label="Description" contenteditable="true" x-init="$el.innerHTML = skill.description" @input="updateDescription($event.target, `skills[index].description`)")

                                 p.text-md.text-gray-800(class="dark:text-white").mt-4
                                    | Scalings
                                    span.btn.btn-ghost(@click="addScaling(index)").ms-5 Add
                                 table.table.table-sm.w-full
                                    thead
                                       tr
                                          th.text-center.w-24
                                             span Level
                                          th.text-center
                                             span Name
                                          th.text-center
                                             span Value
                                          th.text-center.w-20
                                             span Actions
                                    tbody
                                       template(x-for="(scaling, scalingId) in skill.scaling" :key="scalingId")
                                          tr
                                             td.text-center
                                                input(type="number" class="w-full px-2 py-1 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="scaling.level")
                                             td.text-center
                                                input(type="text" class="w-full px-2 py-1 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="scaling.name")
                                             td.text-center
                                                input(type="text" class="w-full px-2 py-1 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="scaling.value")
                                             td.text-center
                                                button.text-gray-500.transition-colors.duration-200(class="dark:hover:text-red-500 dark:text-gray-300 hover:text-red-500 focus:outline-none" @click="deleteScaling(index, scalingId)") 
                                                   i.fas.fa-trash
                              div
                                 div(class="md:ps-2 sm:pt-2 md:pt-1")
                                    label.block
                                       input.block.w-full(type="file" accept="image/*" class="file-input file-input-bordered file-input-ghost" @change="handleFileUpload($event, 'skillIcon')" )
                                    .mt-2 
                                       button.text-sm.text-white.bg-blue-700.border.border-blue-700.rounded-md.shadow-md.w-full.px-4.py-2(class="hover:bg-blue-800.hover:border-blue-800" @click="addSkillIcon(index)") Add Skill Icon 
                                 table.table.table-sm
                                    tbody
                                       template(x-for="(skillIcon, iconindex) in skill.images" :key="iconindex")
                                          tr
                                             td 
                                                button(class="btn btn-sm btn-ghost disabled:bg-transparent" @click="moveSkillIconUp(index, iconindex)"  :disabled="iconindex === 0 ").w-6.py-0.h-6.min-h-6
                                                   i.fas.fa-arrow-up
                                                button(class="btn btn-ghost btn-sm disabled:bg-transparent" @click="moveSkillIconDown(index, iconindex)" :disabled="iconindex == (skill.images.length - 1)").w-6.py-0.h-6.min-h-6
                                                   i.fas.fa-arrow-down
                                             td
                                                img(:src="skillIcon.icon" alt="skin" class="w-10 h-10 rounded-full cursor-pointer" @click="openPreviewModal(skillIcon.icon)")
                                             td
                                                .flex.items.center.gap-x-2
                                                   button(class="btn btn-ghost p-1 disabled:bg-transparent" :disabled="skillIcon.default" @click="setDefaultSkillIcon(index, iconindex)") Default
                                                   button(class="btn btn-ghost p-1" @click="deleteSkillIcon(index, iconindex)") Delete
            .grid.grid-cols-1(class="lg:grid-cols-4 md:grid-cols-2 bg-gray-200 dark:bg-gray-900 gap-0.5" x-show="openTab === 2")
               .col-span-1(class="lg:col-span-1 md:col-span-2 p-3 shadow-lg bg-gray-100 dark:bg-gray-800" )
                  div.mt-1
                     p.text-md.text-gray-800(class="dark:text-white") Name
                     input(type="text" id="skinName" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="newSkin.name")
                  div.mt-4
                     p.text-md.text-gray-800(class="dark:text-white") Rarity
                     select.block.w-full.px-4.py-3.appearance-none.text-sm.text-gray-700.bg-white.border.border-gray-200.rounded-md.mt-1(class="focus:ring focus:ring-blue-300 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" aria-label="Rarity" x-model="newSkin.rarity").capitalize
                        option(hidden value="") Select a Rarity
                        template(x-for="rarity in skinRarity")
                           option(:value="rarity" x-text="rarity").capitalize
                  div.mt-4
                     p.text-md.text-gray-800(class="dark:text-white") Icon
                     label.block.mt-2
                        input.block.w-full(type="file" accept="image/*" class="file-input file-input-bordered file-input-ghost" @change="handleFileUpload($event, 'thumbnail')")
                  div.mt-4
                     p.text-md.text-gray-800(class="dark:text-white") Portrait
                     label.block.mt-2
                        input.block.w-full(type="file" accept="image/*" class="file-input file-input-bordered file-input-ghost" @change="handleFileUpload($event, 'image')")
                  div.mt-4
                     p.text-md.text-gray-800(class="dark:text-white") Splash Art
                     label.block.mt-2
                        input.block.w-full(type="file" accept="image/*" class="file-input file-input-bordered file-input-ghost" @change="handleFileUpload($event, 'banner')")
                  .mt-4 
                     button.text-sm.text-white.bg-blue-700.border.border-blue-700.rounded-md.shadow-md.w-full.px-4.py-2.mt-4(class="hover:bg-blue-800.hover:border-blue-800" @click="addSkin") Save
               .col-span-1(class="lg:col-span-3 md:col-span-2 p-1.5 shadow-lg bg-gray-100 dark:bg-gray-800").overflow-x-auto
                  table.table.table-sm
                     thead
                        tr
                           th(width="30")
                           th(style="width:4rem")
                           th
                              span Name
                           th.text-center
                              span Rarity
                           th.text-center
                              span Portrait
                           th.text-center
                              span Splash Art
                           th
                              span Actions
                     tbody
                        template(x-for="(skin, index) in hero.skins" :key="index")
                           tr
                              td 
                                 button(class="btn btn-ghost btn-sm disabled:bg-transparent" @click="moveSkinUp(index)" :disabled="index == 0").w-6.py-0.h-6.min-h-6
                                    i.fas.fa-arrow-up(class="text-neutral-600 dark:text-white")
                                 button(class="btn btn-ghost btn-sm disabled:bg-transparent" @click="moveSkinDown(index)" :disabled="index == (hero.skins.length - 1)").w-6.py-0.h-6.min-h-6
                                    i.fas.fa-arrow-down
                              td
                                 img(:src="skin.thumbnail" alt="skin" class="w-10 h-10 rounded-full")
                              td(x-text="skin.name")
                              td(x-text="skin.rarity").capitalize.text-center
                              td.text-center
                                 button.text-gray-500.transition-colors.duration-200(class="dark:hover:text-blue-500 dark:text-gray-300 hover:text-blue-500 focus:outline-none" @click="openPreviewModal(skin.image)") 
                                    i.fas.fa-eye
                              td.text-center
                                 button.text-gray-500.transition-colors.duration-200(class="dark:hover:text-blue-500 dark:text-gray-300 hover:text-blue-500 focus:outline-none" @click="openPreviewModal(skin.banner)") 
                                    i.fas.fa-eye
                              td
                                 .flex.items.center.gap-x-2
                                    button.text-gray-500.transition-colors.duration-200(class="dark:hover:text-red-500 dark:text-gray-300 hover:text-red-500 focus:outline-none" @click="deleteSkin(index)") Delete
            .grid.gap-4.grid-cols-1(class="lg:grid-cols-4 md:grid-cols-2 p-3" x-show="openTab === 3")
               .col-span-1(class="lg:col-span-2 md:col-span-2")
                  p.text-md.text-gray-800.font-semibold(class="dark:text-white") HP
                  .grid.gap-4.grid-cols-2.mt-1
                     div
                        p.text-md.text-gray-800(class="dark:text-white") Base
                        input(type="number" id="hpBase" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.hp.base")
                     div
                        p.text-md.text-gray-800(class="dark:text-white") Growth
                        input(type="number" id="hpGrowth" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.hp.growth")

                     div
                        p.text-md.text-gray-800(class="dark:text-white") Regen Base
                        input(type="number" id="hpRegenBase" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.hpRegen.base")
                     div
                        p.text-md.text-gray-800(class="dark:text-white") Regen Growth
                        input(type="number" id="hpRegenGrowth" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.hpRegen.growth")
               .col-span-1(class="lg:col-span-2 md:col-span-2" x-show="hero.resource !== 'none' && hero.resource !== 'rage'")
                  p.text-md.text-gray-800.font-semibold(class="dark:text-white" x-text="hero.resource").capitalize 
                  .grid.gap-4.grid-cols-2.mt-1
                     div
                        p.text-md.text-gray-800(class="dark:text-white") Base
                        input(type="number" id="resourceBase" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.resource.base")
                     div
                        p.text-md.text-gray-800(class="dark:text-white") Growth
                        input(type="number" id="resourceGrowth" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.resource.growth")

                     div
                        p.text-md.text-gray-800(class="dark:text-white") Regen Base
                        input(type="number" id="resourceRegenBase" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.resourceRegen.base")
                     div
                        p.text-md.text-gray-800(class="dark:text-white") Regen Growth
                        input(type="number" id="resourceRegenGrowth" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.resourceRegen.growth")
               .col-span-1(class="lg:col-span-2 md:col-span-2")
                  p.text-md.text-gray-800.font-semibold(class="dark:text-white") Physical
                  .grid.gap-4.grid-cols-2.mt-1
                     div
                        p.text-md.text-gray-800(class="dark:text-white") Attack Base
                        input(type="number" id="physicalAttackBase" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.physicalAttack.base")
                     div
                        p.text-md.text-gray-800(class="dark:text-white") Attack Growth
                        input(type="number" id="physicalAttackGrowth" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.physicalAttack.growth")
                     div
                        p.text-md.text-gray-800(class="dark:text-white") Defense Base
                        input(type="number" id="physicalDefenseBase" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.physicalDefense.base")
                     div
                        p.text-md.text-gray-800(class="dark:text-white") Defense Growth
                        input(type="number" id="physicalDefenseGrowth" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.physicalDefense.growth")
               .col-span-1(class="lg:col-span-2 md:col-span-2")
                  p.text-md.text-gray-800.font-semibold(class="dark:text-white") Magic
                  .grid.gap-4.grid-cols-2.mt-1
                     div
                        p.text-md.text-gray-800(class="dark:text-white") Power Base
                        input(type="number" id="magicPower" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.magicPower.base")
                     div
                        p.text-md.text-gray-800(class="dark:text-white") Power Growth
                        input(type="number" id="magicPowerGrowth" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.magicPower.growth")
                     div
                        p.text-md.text-gray-800(class="dark:text-white") Defense Base
                        input(type="number" id="magicDefenseBase" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.magicDefense.base")
                     div
                        p.text-md.text-gray-800(class="dark:text-white") Defense Growth
                        input(type="number" id="magicDefenseGrowth" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.magicDefense.growth")
               .col-span-1(class="lg:col-span-2 md:col-span-2")
                  p.text-md.text-gray-800.font-semibold(class="dark:text-white") Attack Speed
                  .grid.gap-4.grid-cols-2.mt-1
                     div
                        p.text-md.text-gray-800(class="dark:text-white") Base
                        input(type="number" id="attackSpeedBase" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.attackSpeed.base")
                     div
                        p.text-md.text-gray-800(class="dark:text-white") Growth
                        input(type="number" id="attackSpeedGrowth" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.attackSpeed.growth")
                     div
                        p.text-md.text-gray-800(class="dark:text-white") Ratio %
                        input(type="number" id="attackSpeedRatio" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.attackSpeedRatio.percentage")
               .col-span-1(class="lg:col-span-2 md:col-span-2")
                  label.text-md.text-gray-800.font-semibold(class="dark:text-white") 
                     | Basic Attack Range
                     //create alternate ratio
                  label(class="dark:text-white relative inline-flex cursor-pointer items-center").float-right
                     input(type="checkbox" id="switch" @click="alternateBasicRange = !alternateBasicRange" x-model="alternateBasicRange").peer.sr-only
                     label(class="hidden" for="switch")
                     div(class="peer h-6 w-11 rounded-full border bg-slate-200 after:absolute after:left-[2px] after:top-0.5 after:h-5 after:w-5 after:rounded-full after:border after:border-gray-300 after:bg-white after:transition-all after:content-[''] peer-checked:bg-slate-800 peer-checked:after:translate-x-full peer-checked:after:border-white peer-focus:ring-green-300 mr-2")
                     | Alternate

                  .grid.gap-4.grid-cols-2.mt-1
                     div
                        p.text-md.text-gray-800(class="dark:text-white") Name
                        input(type="text" id="basicAttackRangeBaseName" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" :disabled="!alternateBasicRange" x-model="hero.attributes.basicAttackRange.baseName")
                     div 
                        p.text-md.text-gray-800(class="dark:text-white") Value
                        input(type="number" id="basicAttackRangeBase" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.basicAttackRange.base")
                     div(x-show="alternateBasicRange")
                        p.text-md.text-gray-800(class="dark:text-white") Alternate
                        input(type="text" id="basicAttackRangeAlternateName" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.basicAttackRange.alternateName")
                     div(x-show="alternateBasicRange")
                        p.text-md.text-gray-800(class="dark:text-white") Value
                        input(type="number" id="basicAttackRangeAlternate" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.basicAttackRange.alternate")
               .col-span-1(class="lg:col-span-2 md:col-span-2")
                  p.text-md.text-gray-800.font-semibold(class="dark:text-white") Critical
                  .grid.gap-4.grid-cols-2.mt-1
                     div
                        p.text-md.text-gray-800(class="dark:text-white") Chance %
                        input(type="number" id="criticalChancePercentage" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.criticalChance.percentage")
                     div
                        p.text-md.text-gray-800(class="dark:text-white") Damage %
                        input(type="number" id="criticalDamagePercentage" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.criticalDamage.percentage")
                     div
                        p.text-md.text-gray-800(class="dark:text-white") Damage Reduction %
                        input(type="number" id="criticalDamageReduction" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.criticalDamageReduction.percentage")
               .col-span-1(class="lg:col-span-2 md:col-span-2")
                  p.text-md.text-gray-800.font-semibold(class="dark:text-white") Healing
                  .grid.gap-4.grid-cols-2.mt-1
                     div
                        p.text-md.text-gray-800(class="dark:text-white") Effect %
                        input(type="number" id="healingEffectPercentage" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.healingEffect.percentage")
                     div
                        p.text-md.text-gray-800(class="dark:text-white") Received %
                        input(type="number" id="healingReceivedPercentage" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.healingReceived.percentage")
                     div
                        p.text-md.text-gray-800(class="dark:text-white") Lifesteal %
                        input(type="number" id="lifestealPercentage" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.lifesteal.percentage")
                     div
                        p.text-md.text-gray-800(class="dark:text-white") Spell Vamp %
                        input(type="number" id="spellVampPercentage" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.spellVamp.percentage")
               .col-span-1(class="lg:col-span-4 md:col-span-2")
                  p.text-md.text-gray-800.font-semibold(class="dark:text-white") Others
               div
                  p.text-md.text-gray-800(class="dark:text-white") Movement Speed
                  input(type="number" id="movementSpeedBase" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.movementSpeed.base")
               div
                  p.text-md.text-gray-800(class="dark:text-white") Resilience %
                  input(type="number" id="resiliencePercentage" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.resilience.percentage")
               div
                  p.text-md.text-gray-800(class="dark:text-white") Damage Reduction %
                  input(type="number" id="damageReductionPercentage" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:dark-blue-300" x-model="hero.attributes.damageReduction.percentage")
               div
                  p.text-md.text-gray-800(class="dark:text-white") Cooldown Reduction %
                  input(type="number" id="cooldownReductionPercentage" class="w-full px-4 py-3 appearance-none text-sm text-gray-700 bg-white border border-gray-200 rounded-md mt-1 focus:ring-opacity-40 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:fo88cus:dark-blue-300" x-model="hero.attributes.cooldownReduction.percentage")
            div.p-3(x-show="openTab === 4")
               //lane/role selection 
               template(x-for="(position, index) in positions" :key="index")
                  div.collapse.bg-base-200.mb-1
                     input(type="checkbox")
                     .collapse-title.text-xl.font-medium(x-text="position").capitalize
                     .collapse-content
                        p Test


               //strengths
               //weakness
               //gameplan
               //powerspikes
            .grid.gap-4.grid-cols-1(class="lg:grid-cols-4 md:grid-cols-2 p-3" x-show="openTab === 5")
               //builds


   dialog.modal#imagePreviewModal
      .modal-box.p-0.shadow-none.bg-transparent.w-auto
         img#previewImage.w-auto.object-scale-down(class="h-auto max-h-96")
         video#previewVideo.w-auto.object-scale-down(class="h-auto max-h-96")
      form(method="dialog").modal-backdrop
         button close
   dialog.modal#textPreviewModal
      .modal-box(class="bg-white dark:bg-neutral-900 text-neutral-500 dark:text-white")
         h3.font-bold Text Preview
         #textPreviewModalBody.mt-2
      form(method="dialog").modal-backdrop
         button close

block scripts 
   script.
      var loadThumbnail = function(event) {
         var output = document.getElementById('thumbnail');
         output.src = URL.createObjectURL(event.target.files[0]);
         output.onload = function(){
            URL.revokeObjectURL(output.src)
         }
      };
      document.addEventListener('alpine:init', () => {
         Alpine.data('heroData', () => ({
            hero: {},
            roles: [],
            resources: [],
            skillTags: [],
            skinRarity: [],
            skillType: [],
            specialities: [],
            attackTypes: [],
            alternateBasicRange: false,
            newSkillIcon: {
               model: null,
               file: null,
               icon: null,
            },
            newSkin: {
               name: '',
               rarity: '',
               thumbnail: null,
               image: null,
               banner: null,
               thumbnailFile: null,
               imageFile: null,
               bannerFile: null,
               thumbnailModel: null,
               imageModel: null,
               bannerModel: null,
            },
            init(){
               showLoading()
               this.fetchMisc()
               this.fetchHero()
               hideLoading()
            },
            async fetchMisc(){
               const [error, response] = await axios.post[Symbol.result](`/api/misc`, {
                  requestData: "roles,resources,skillTags,skinRarity,specialities,attackTypes,alternateBasicRange"
               })

               if(error)
                  return showAlert("error", "Something happened, Please try again")

               this.roles = response.data.roles 
               this.resources = response.data.resources
               this.skillTags = response.data.skillTags 
               this.skinRarity = response.data.skinRarity
               this.skillTypes = response.data.skillTypes
               this.specialities = response.data.specialities
               this.attackTypes = response.data.attackTypes
            },
            async fetchHero () {
               const url = new URL(window.location.href)
               const id = url.pathname.split('/').pop()

               if(!id){
                  return
               }

               const [error, response] = await axios.get[Symbol.result](`/dash/hero/${id}`, {})

               if(error)
                  return showAlert("error", "Something happened. Please try again")

               this.hero = response.data

               if (this.hero.attributes.basicAttackRange.alternate > 0) 
                  this.alternateBasicRange = true

               if(this.hero.ratings.difficulty === null || this.hero.ratings.difficulty === 0)
                  this.hero.ratings.difficulty = 1

               if(this.hero.ratings.offense === null || this.hero.ratings.offense === 0)
                  this.hero.ratings.offense = 1

               if(this.hero.ratings.crowd_effects === null || this.hero.ratings.crowd_effects === 0)
                  this.hero.ratings.crowd_effects = 1

               if(this.hero.ratings.durability === null || this.hero.ratings.durability === 0)
                  this.hero.ratings.durability = 1

               if(this.hero.ratings.mobility === null || this.hero.ratings.mobility === 0)
                  this.hero.ratings.mobility = 1

               if(this.hero.ratings.early_game === null || this.hero.ratings.early_game === 0)
                  this.hero.ratings.early_game = 1

               if(this.hero.ratings.mid_game === null || this.hero.ratings.mid_game === 0)
                  this.hero.ratings.mid_game = 1

               if(this.hero.ratings.late_game === null || this.hero.ratings.late_game === 0)
                  this.hero.ratings.late_game = 1
            },
            addSkin() {
               if(!this.newSkin.name)
                  return showAlert("error", "Skin name is required")
               if(!this.newSkin.rarity)
                  return showAlert("error", "Skin rarity is required")
               if(!this.newSkin.thumbnailFile)
                  return showAlert("error", "Icon is required")
               if(!this.newSkin.imageFile)
                  return showAlert("error", "Portrait is required")
               if(!this.newSkin.bannerFile)
                  return showAlert("error", "Splash Art is required")

               const skin = {
                  name: this.newSkin.name,
                  rarity: this.newSkin.rarity,
                  thumbnail: this.newSkin.thumbnail,
                  image: this.newSkin.image,
                  banner: this.newSkin.banner,
                  thumbnailFile: this.newSkin.thumbnailFile,
                  imageFile: this.newSkin.imageFile,
                  bannerFile: this.newSkin.bannerFile,
               };
               this.hero.skins.push(skin);
               this.resetSkin();
            },
            moveSkinUp(index) {
               if (index > 0) {
                  const skin = this.hero.skins.splice(index, 1)[0];
                  this.hero.skins.splice(index - 1, 0, skin);
               }
            },
            moveSkinDown(index) {
               if (index < this.hero.skins.length - 1) {
                  const skin = this.hero.skins.splice(index, 1)[0];
                  this.hero.skins.splice(index + 1, 0, skin);
               }
            },
            handleFileUpload(event, type) {
               const file = event.target.files[0];
               if (file) {
                  const reader = new FileReader();
                  reader.onload = (e) => {
                     if (type === 'thumbnail') {
                        this.newSkin.thumbnail = e.target.result;
                        this.newSkin.thumbnailFile = file;
                     } else if (type === 'image') {
                        this.newSkin.image = e.target.result;
                        this.newSkin.imageFile = file;
                     } else if (type === 'banner') {
                        this.newSkin.banner = e.target.result;
                        this.newSkin.bannerFile = file;
                     } else if (type == "skillIcon"){
                        this.newSkillIcon.icon = e.target.result
                        this.newSkillIcon.file = file
                     }
                  };
                  reader.readAsDataURL(file);
               }
            },
            handleVideoUpload(event, skillId){
               const file = event.target.files[0];
               if (file) {
                  const reader = new FileReader();
                  reader.onload = (e) => {
                     const skill = this.hero.skills.find(skill => skill.id === skillId)
                     skill.video = e.target.result
                     skill.videoFile = file
                  };
                  reader.readAsDataURL(file);
               }
            },
            resetSkin() {
               this.newSkin = {
                  name: '',
                  rarity: '',
                  thumbnail: null,
                  image: null,
                  banner: null,
                  thumbnailFile: null,
                  imageFile: null,
                  bannerFile: null,
                  thumbnailModel: null,
                  imageModel: null,
                  bannerModel: null,
               };
            },
            deleteSkin(index){
               showModal("Confirm", "Are you sure you want to delete this skin?", "Delete", () => {
                  this.hero.skins.splice(index, 1)
               })
            },
            addSkillIcon(index){
               if(!this.newSkillIcon.icon)
                  return showAlert("error", "Skill Icon is required")

               if (!this.hero.skills[index].images) {
                  this.hero.skills[index].images = []; 
               }

               const skillIcon = {
                  icon: this.newSkillIcon.icon,
                  file: this.newSkillIcon.file,						
               }
               this.hero.skills[index].images.push(skillIcon)
               this.newSkillIcon = {
                  model: null,
                  file: null,
                  icon: null,
               }
            },
            moveSkillIconUp(index, iconindex){
               if (iconindex > 0) {
                  const skillIcon = this.hero.skills[index].images.splice(iconindex, 1)[0];
                  this.hero.skills[index].images.splice(iconindex - 1, 0, skillIcon);
               }
            },
            moveSkillIconDown(index, iconindex){
               if (iconindex < this.hero.skills[index].images.length - 1) {
                  const skillIcon = this.hero.skills[index].images.splice(iconindex, 1)[0];
                  this.hero.skills[index].images.splice(iconindex + 1, 0, skillIcon);
               }
            },
            setDefaultSkillIcon(index, iconindex){
               this.hero.skills[index].images[iconindex].default = true
               this.hero.skills[index].images.forEach((icon, i) => {
                  if(i !== iconindex)
                     icon.default = false
               })
            },
            openPreviewModal(image) {
               const previewImage = document.getElementById('previewImage')
               previewImage.src = image 
               const previewVideo = document.getElementById('previewVideo')
               previewVideo.style.display = "none"
               document.getElementById("imagePreviewModal").showModal()
            },
            openTextPreviewModal(content){
               const textPreviewModalBody = document.getElementById('textPreviewModalBody')
               textPreviewModalBody.innerHTML = this.parseDescription(content)
               document.getElementById("textPreviewModal").showModal()
            },
            openVideoPreviewModal(video){
               const previewImage = document.getElementById('previewImage')
               previewImage.style.display = "none" 
               const previewVideo = document.getElementById('previewVideo')
               previewVideo.src = video
               //play on load
               //no audio
               previewVideo.muted = true
               previewVideo.autoplay = true
               previewVideo.loop = true
               document.getElementById("imagePreviewModal").showModal()
            },
            updateDescription(element, type) {
               const content = element.innerHTML;

               this.hero.type = content;
            },
            parseDescription(content) {
               const regex = /\[(([\w-]+)?(?:,[\w-]+)*)\]\[([^\]]+)\]/g;

               const result = content.replace(regex, (match, classesOrDecoration, _, text, length) => {
                  if (classesOrDecoration) {
                     const classList = classesOrDecoration.split(',');
                     return `<span class="${classList.join(' ')}">${text}</span>`;
                  } else {
                     return match;
                  }
               });

               return result;
            },
            addScaling(skillIndex){
               this.hero.skills[skillIndex].scaling.push({
                  level: 1,
                  value: "",
                  name: ""
               })
            },
            deleteScaling(skillIndex, scalingIndex){
               this.hero.skills[skillIndex].scaling.splice(scalingIndex, 1)
            },
         }))
      })
