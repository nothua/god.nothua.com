extends ../_layout

block content
    section.container.mx-auto(x-data="heroList")
        div(class="sm:flex sm:items-center sm:justify-between")
            div
                .flex.items-center.gap-x-3
                    h2.text-lg.font-medium.text-gray-800(class="dark:text-white") Heroes
                    span.px-3.py-1.text-xs.text-blue-600.bg-blue-100.rounded-full(class="dark:bg-gray-800 dark:text-blue-400")#heroes-count 200 heroes
            .flex.items-center.mt-4.gap-x-3
                button.flex.items-center.justify-center.px-5.py-2.text-sm.tracking-wide.text-white.transition-colors.duration-200.bg-blue-500.rounded-lg.shrink-0.gap-x-2(class="w-1/2 sm:w-auto hover:bg-blue-600 dark:bg-blue-600 dark:hover:bg-blue-500" @click="isOpen = true")
                    i.fas.fa-add
                    span Add hero
        .mt-6(class="md:flex md:items-center md:justify-between")
            .space-y-2.relative
                button.flex.items-center.justify-between.bg-white.px-4.py-2.text-gray-900.border.w-full.border-gray-300.rounded(@click="isFilterDropdownOpen = !isFilterDropdownOpen" class="lg:w-52 md:w-40 dark:bg-gray-800 dark:border-gray-700 dark:text-white")
                    span.text-sm.font-medium Types
                    svg(:class="{ 'rotate-180': isFilterDropdownOpen }"
                        class="w-4 h-4 transition-transform duration-200"
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke-width="1.5"
                        stroke="currentColor")
                        path(stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5")
                .absolute.z-10.mt-2.bg-white.border.border-gray-300.rounded.shadow-lg.w-full(x-show="isFilterDropdownOpen" @click.away="isFilterDropdownOpen=false" class="lg:w-52 md:w-40 dark:bg-gray-800 dark:border-gray-700")
                    header.flex.items-center.justify-between.px-4.py-3.border-b.border-gray-200
                        span.text-sm.text-gray-700( x-text="`${typeFilters.length} Selected`" class="dark:text-white")
                        button.text-sm.text-gray-900(@click="toggleFilter('none')" class="dark:text-white") Reset
                    ul.p-4
                        template(x-for="type in filterButtons" :key="type.query")
                            li
                                label.inline-flex.items-center.gap-2
                                    input(type="checkbox" :checked="typeFilters.includes(type.query)" @change="toggleFilter(type.query)" :disabled="typeFilters.length >= 2 && !typeFilters.includes(type.query)")
                                    span.text-sm.font-medium.text-gray-700.capitalize.ms-1(x-text="type.title" class="dark:text-white")

            .relative.flex-items-center.mt-4(class="md:mt-0")
                span.absolute
                    i.fas.fa-search.w-5.h-5.mx-3.text-gray-400(class="dark:text-gray-600 mt-2.5")
                input.block.w-full.pr-5.text-gray-700.bg-white.border.border-gray-200.rounded-lg(class="py-1.5 md:w-80 placeholder-gray-400/70 pl-11 rtl:pr-11 rtl:pl-5 dark:bg-gray-900 dark:text-gray-300 dark:border-gray-600 focus:border-blue-300 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40" placeholder="Search" type="text" x-model="searchQuery" @input="searchHeroes")

        .hidden.flex.items-center.mt-6.text-center.border.rounded-lg.h-96(class="dark:border-gray-700")#no-heroes
            .flex.flex-col.w-full.max-w.sm.px-4.mx-auto
                .p-3.mx-auto.text-blue-500.bg-blue-100.rounded-full(class="dark:bg-gray-800")
                    i.w-6.h-6.fas.fa-search
                h1.mt-3.text-lg.text-gray-800(class="dark:text-white") No heroes found
                p.mt-2.text-gray-500(class="dark:text-gray-400") Your search did not match any heroes. Try again or create a new one
                .flex.items-center.mt-4(class="sm:mx-auto gap-x-3")
                    button.px-5.py-2.text-sm.text-gray-700.transition-colors.duration-200.bg-white.border.rounded-lg(class="w-1/2 sm:w-auto dark:hover:bg-gray-800 dark:bg-gray-900 hover:bg-gray-100 dark:text-gray-200 dark:border-gray-700" @click="clearSearch")
                        | Clear Search

                    button.flex.items-center.justify-center.py-2.px-2.text-sm.tracking-wide.text-white.transition-colors.duration-200.bg-blue-500.rounded-lg.shrink-0(class="w-1/2 sm:w-auto gap-x-2 hover:bg-blue-600 dark:hover:bg-blue-500 dark:bg-blue-600" @click="isOpen = true" )
                        i.fas.fa-add
                        span Add hero

        .flex.flex-col.mt-6.min-h-96#heroes-table-layout
            .overflow-x-auto(class="-my-2 md:-mx-6 lg:-mx-8")
                .inline-block.min-w-full.py-2.align-middle(class="md:px-6 lg:px-8")
                    .overflow-hidden.border.border-gray-200(class="dark:border-gray-700 md:rounded-lg")
                        table.min-w-full.divide-y.divide-gray-200(class="dark:divide-gray-700")#heroes-table
                            thead.bg-gray-50(class="dark:bg-gray-800")
                                tr
                                    th(class="py-3.5 rtl:text-right dark:text-gray-400" width="100" scope="col").px-4.text-sm.font-small.text-left.text-gray-500
                                        span(style="visibility:hidden") Image
                                    th(class="py-3.5 rtl:text-right dark:text-gray-400" width="100" scope="col").text-sm.font-small.text-left.text-gray-500
                                        button.flex.items-center.gap-x-3(class="focus:outline-none" @click="sortHeroes('_id')")
                                            span ID
                                            i.fas.fa-sort.text-gray-400
                                    th(class="rtl:text-right dark:text-gray-400 py-3.5" scope="col").text-sm.font-small.text-left.text-gray-500
                                        button.flex.items-center.gap-x-3(class="focus:outline-none" @click="sortHeroes('name')")
                                            span Name
                                            i.fas.fa-sort.text-gray-400
                                    th(class="rtl:text-right dark:text-gray-400 py-3.5" scope="col").px-12.text-sm.font-small.text-left.text-gray-500
                                        span Role
                                    th(class="rtl:text-right dark:text-gray-400 py-3.5" scope="col").px-12.text-sm.font-small.text-start.text-gray-500
                                        span Actions
                            tbody.bg-white.divide-y.divide-gray-200(class="dark:divide-gray-700 dark:bg-gray-900")
                                template(x-for="hero in filteredHeroes" :key="hero._id")
                                    tr
                                        td.text-sm.font-medium.whitespace-nowrap.text-gray-800.px-4(class="dark:text-white")
                                            img(:src="hero.thumbnail" alt="hero" class="w-10 h-10 rounded-full")
                                        td.text-sm.font-medium.whitespace-nowrap.text-gray-800(class="dark:text-white" x-text="hero._id")
                                        td.text-sm.font-medium.whitespace-nowrap.text-gray-800(class="dark:text-white" x-text="hero.name")
                                        td.px-12.py-4.text-sm.font-medium.whitespace-nowrap.text-gray-800(class="dark:text-white" x-text="formatRole(hero.role)")
                                        td.px-12.py-4.text-sm.whitespace-nowrap
                                            .flex.tems.center.gap-x-6
                                                a.text-gray-500.transition-colors.duration-200(class="dark:hover:text-blue-500 dark:text-gray-300 hover:text-blue-500 focus:outline-none" x-bind:href="'/dash/heroes/edit/' + hero._id").w-12.text-center Edit
                                                button.text-gray-500.transition-colors.duration-200(class="dark:hover:text-red-500 dark:text-gray-300 hover:text-red-500 focus:outline-none" @click="deleteHero(hero._id)").w-12.text-center Delete



block scripts
    script.
        const types = JSON.parse(`!{JSON.stringify(types)}`)
        document.addEventListener('alpine:init', () => {
            Alpine.data('heroList', () => ({
                heroes: [],
                filteredHeroes: [],
                searchQuery: "",
                typeFilters: [],
                isFormOpen: false,
                openDropdown: null,
                isOpen: false,
                form_data: {
                },
                isFilterDropdownOpen: false,
                filterButtons : [],
                sortBy: {
                    key: "",
                    order: "asc"
                },

                init() {
                    this.loadHeroes()

                    Object.entries(types).forEach(([key, value]) => {
                        this.filterButtons.push({
                            title: key,
                            query: value,
                        })
                    })
                },

                async loadHeroes(){
                    showLoading()

                    const [error, response] = await axios.get[Symbol.result]("/dash/heroes/list", {})

                    hideLoading()

                    if(error)
                        return showAlert("error", "Something happened. Please try again")

                    this.heroes = response.data

                    this.filteredHeroes = this.heroes
                    this.renderHeroes()
                },

                async renderHeroes(){
                    if(this.filteredHeroes.length > 0){
                        document.getElementById("heroes-table-layout").classList.remove("hidden")
                        document.getElementById("no-heroes").classList.add("hidden")
                    }else{
                        document.getElementById("heroes-table-layout").classList.add("hidden")
                        document.getElementById("no-heroes").classList.remove("hidden")
                    }
                    document.getElementById("heroes-count").innerHTML = this.filteredHeroes.length + (this.filteredHeroes.length == 1 ? " hero" : " heroes")
                },

                toggleFilter(typeValue) {
                    if(typeValue != "none")
                        if (this.typeFilters.includes(typeValue)) {
                            this.typeFilters = this.typeFilters.filter(value => value !== typeValue);
                        } else {
                            if(this.typeFilters.length >= 2)
                                showAlert("error", "Can only select 2 roles")
                            else 
                                this.typeFilters.push(typeValue);
                        }
                    else
                        this.typeFilters = []

                    this.searchHeroes()
                },

                async searchHeroes(){

                    this.filteredHeroes = this.heroes.filter(hero => {

                        const typeFilter = () => {
                            if(this.typeFilters.length == 0) return true
                            let _filter = false 

                            if(this.typeFilters.length == 2){
                                if(hero.role.primary == this.typeFilters[0] && hero.role.secondary == this.typeFilters[1])
                                    _filter = true
                                else if(hero.role.primary == this.typeFilters[1] && hero.role.secondary == this.typeFilters[0])
                                    _filter = true
                            }
                            else if(this.typeFilters.length == 1)
                                if(hero.role.primary == this.typeFilters[0] || hero.role.secondary == this.typeFilters[0])
                                    _filter = true

                            return _filter
                        }

                        const searchFilter = () => {
                            if(this.searchQuery)
                                return hero.name.toLowerCase().includes((this.searchQuery.toLowerCase()))

                            return true
                        }

                        return searchFilter() && typeFilter()
                    })

                    this.renderHeroes()
                },

                async deletehero(heroId){
                    showModal("Are you sure?", "The hero cannot be accessed once deleted.", "Delete", async () => {
                        const preloader = document.getElementById("preloader")
                        preloader.classList.remove("hidden")

                        try{
                            const response = await axios.delete(`/heroes/delete/${heroId}`)

                            if(response.data.success)
                                showAlert("success", response.data.message)
                            else
                                showAlert("error", response.data.message)
                        }catch (error){
                            console.log(error.message)
                            showAlert("error", "Something happened. Please try again")
                        }

                        await this.loadHeroes()
                    })
                },

                async clearSearch(){
                    this.searchQuery = ""
                    this.searchHeroes()
                },


                formatRole(role) {
                    const primary = capitalizeFirstLetter(role.primary);
                    if (role.secondary) {
                        const secondary = capitalizeFirstLetter(role.secondary);
                        return `${primary}/${secondary}`;
                    }
                    return primary;
                },

                async sortHeroes(key){
                    this.filteredHeroes = this.filteredHeroes.sort((a, b) => {
                        if(a[key] < b[key]) return -1
                        if(a[key] > b[key]) return 1
                        return 0
                    })

                    if(this.sortBy.key == key){
                        this.sortBy.order = this.sortBy.order == "asc" ? "desc" : "asc"
                        if(this.sortBy.order == "desc")
                            this.filteredHeroes = this.filteredHeroes.reverse()
                    }

                    this.sortBy.key = key

                    this.renderHeroes()
                },
            }))
        })
