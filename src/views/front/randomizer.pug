doctype html
html(lang="en").bg-gray-950
    head
        title Build Randomizer | Guide of Dawn
        link(rel='stylesheet' href='/lib/fontawesome/css/all.min.css')
        link(rel="stylesheet" href="/css/tailwind.css")
        link(href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&family=Share+Tech+Mono&display=swap" rel="stylesheet")
        script(src="https://cdn.jsdelivr.net/npm/chart.js" defer)
        script(src="https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@1.4.0/dist/chartjs-plugin-annotation.min.js" defer)
        style.
            .text-outline-glow {
                text-shadow: 0 0 5px #00f, 0 0 10px #00f, 0 0 15px #00f; 
            }
            .btn-glow-green {
                box-shadow: 0 0 5px rgba(34, 197, 94, 0.5), 0 0 10px rgba(34, 197, 94, 0.3);
                transition: all 0.2s ease-in-out;
            }
            .btn-glow-green:hover {
                box-shadow: 0 0 8px rgba(34, 197, 94, 0.7), 0 0 15px rgba(34, 197, 94, 0.5);
                transform: translateY(-1px);
            }
            .btn-glow-blue {
                box-shadow: 0 0 5px rgba(59, 130, 246, 0.5), 0 0 10px rgba(59, 130, 246, 0.3);
                transition: all 0.2s ease-in-out;
            }
            .btn-glow-blue:hover {
                box-shadow: 0 0 8px rgba(59, 130, 246, 0.7), 0 0 15px rgba(59, 130, 246, 0.5);
                transform: translateY(-1px);
            }
            .input-glow:focus {
                outline: none;
                box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.5);
            }
            .table-row-hover-glow:hover {
                background-color: #2d3748;
                box-shadow: 0 0 8px rgba(59, 130, 246, 0.3); 
                transform: translateY(-1px);
            }
            ::-webkit-scrollbar {
                width: 8px;
            }
            ::-webkit-scrollbar-track {
                background: #1f2937; 
                border-radius: 10px;
            }
            ::-webkit-scrollbar-thumb {
                background: #4a5568; 
                border-radius: 10px;
            }
            ::-webkit-scrollbar-thumb:hover {
                background: #6b7280; 
            }

            .glow-fire {
                font-weight: bold;
                animation: fireGlow 1s infinite alternate;
            }

            .burning-border {
                position: relative;
                z-index: 0;
                overflow: hidden;
            }

            .burning-border::before {
                content: '';
                position: absolute;
                top: -2px; left: -2px; right: -2px; bottom: -2px;
                background: repeating-radial-gradient(circle, #ff6600, #ff3300, #ff0000);
                z-index: -1;
                filter: blur(8px);
                opacity: 0.8;
                animation: burnBorder 1.2s infinite alternate;
                border-radius: 0.5rem;
            }

            @keyframes fireGlow {
                0% {
                    text-shadow: 0 0 6px #ff6600, 0 0 12px #ff3300, 0 0 18px #ff0000;
                }
                100% {
                    text-shadow: 0 0 10px #ff3300, 0 0 20px #ff0000, 0 0 25px #cc0000;
                }
            }

            @keyframes burnBorder {
                0% {
                    transform: scale(1);
                    opacity: 0.7;
                }
                100% {
                    transform: scale(1.05);
                    opacity: 1;
                }
            }

    body(x-data="buildRandomizer()" x-init="init()" class=" text-gray-100 font-sans tracking-wide")
        div(class="container mx-auto px-4 py-8")
            // Header
            h1(class="text-2xl font-extrabold mb-8 text-white uppercase font-orbitron") Randomizer

            // Filters and Search
            div.gap-x-4.flex
                div
                    input(
                        type="text"
                        class="input input-bordered w-80 mt-4"
                        placeholder="Select Hero"
                        x-model="heroDropdown.search"
                        @focus="heroDropdown.isOpen = true"
                        @click.away="heroDropdown.isOpen = false"
                    )
                    div(x-show="heroDropdown.isOpen" class="absolute z-50 w-80 border border-base-200 rounded-lg shadow-lg mt-1 max-h-52 overflow-y-auto")
                        template(x-for="hero in heroes.filter(t => t.name.toLowerCase().includes(heroDropdown.search.toLowerCase()))" :key="hero._id")
                            div(
                                @click="heroDropdown.value = hero.id; heroDropdown.search = hero.name; heroDropdown.isOpen = false"
                                class="hover:bg-base-100 cursor-pointer flex flex-justify-between gap-x-2 p-2"
                            )
                                img(:src="hero.thumbnail").w-8
                                span(x-text="hero.name")
                div
                    input(
                        type="text"
                        class="input input-bordered w-80 mt-4"
                        placeholder="Select Role"
                        x-model="roleDropdown.search"
                        @focus="roleDropdown.isOpen = true"
                        @click.away="roleDropdown.isOpen = false"
                    )
                    div(x-show="roleDropdown.isOpen" class="absolute z-50 w-80 border border-base-200 rounded-lg shadow-lg mt-1 max-h-52 overflow-y-auto")
                        template(x-for="role in roles.filter(t => t.toLowerCase().includes(roleDropdown.search.toLowerCase()))" :key="role")
                            div(
                                @click="roleDropdown.value = hero.id; roleDropdown.search = role; roleDropdown.isOpen = false"
                                class="hover:bg-base-100 cursor-pointer flex flex-justify-between gap-x-2 p-2"
                            )
                                span(x-text="role")

        
        div#preloader.fixed.inset-0.flex.items-center.justify-center.bg-gray-900.bg-opacity-75.z-50.hidden
            div.flex.space-x-2
                div.w-4.h-4.bg-blue-500.rounded-full.animate-bounce
                div.w-4.h-4.bg-blue-500.rounded-full.animate-bounce.delay-200
                div.w-4.h-4.bg-blue-500.rounded-full.animate-bounce.delay-400
                
        script(src="/js/alpine.js" defer)
        script(src="/js/axios.js")
        script(src="/js/mlbb_api.js")
        script(src="/js/script.js")
        script.
            function buildRandomizer() {
                return {
                    heroes: [],
                    heroDropdown: {
                        search: "",
                        value: "",
                        isOpen: false
                    },
                    roles: [],
                    roleDropdown: {
                        search: "",
                        value: "",
                        isOpen: false
                    },


                    init() {
                        this.fetchHeroes()
                        this.fetchMisc()
                    },
                    async fetchMisc(){
                        const [error, response] = await axios.post[Symbol.result]("/api/misc", {
                            requestData: "roles"
                        })
                        
                        if(error)
                            return showAlert("error", "Something happened. Please try again")

                        this.roles = response.data.roles
                    },

                    async fetchHeroes(){
                        const [error, response] = await axios.get[Symbol.result]("/api/heroes/list", {})

                        if(error)
                            return showAlert("error", "Something happened. Please try again")

                        this.heroes = response.data
                    },

                    async fetchRoles(){
                        const [error, response] = await axios.get[Symbol.result]("/api/roles/list", {})

                        if(error)
                            return showAlert("error", "Something happened. Please try again")

                        this.roles = response.data
                    },
                };
            }