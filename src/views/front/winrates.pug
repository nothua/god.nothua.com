doctype html
html(lang="en")
    head
        title Hero Winrates | Guide of Dawn
        link(rel='stylesheet' href='/lib/fontawesome/css/all.min.css')
        link(rel="stylesheet" href="/css/tailwind.css")
        script(src="https://cdn.jsdelivr.net/npm/chart.js" defer)
        script(src="https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@1.4.0/dist/chartjs-plugin-annotation.min.js" defer)
    body(x-data="heroStatsData()" x-init="init()" class="bg-gray-900 text-white")
        div(class="container mx-auto px-4 py-8")
            // Header
            h1(class="text-2xl font-bold mb-6") Hero Performance Stats

            // Filters and Search
            div(class="flex space-x-4 mb-6")
                // Rank Selector
                select(
                    x-model="rank"
                    @change="fetchHeroStats()"
                    class="bg-gray-800 text-white p-2 rounded"
                )
                    option(value="All") All Ranks
                    option(value="Epic") Epic
                    option(value="Legend") Legend
                    option(value="Mythic") Mythic
                    option(value="MythicHonor") Mythic Honor
                    option(value="MythicGlory") Mythic Glory

                // Date Range Selector
                select(
                    x-model="dateRange"
                    @change="fetchHeroStats()"
                    class="bg-gray-800 text-white p-2 rounded"
                )
                    option(value="1") Last Day
                    option(value="3") Last 3 Days
                    option(value="7") Last 7 Days
                    option(value="15") Last 15 Days
                    option(value="30") Last 30 Days

            // Hero Stats Table
            div(class="bg-gray-800 rounded-lg overflow-hidden")
                table(class="w-full text-left")
                    thead(class="bg-gray-700")
                        tr
                            th(
                                class="p-3 cursor-pointer"
                                @click="sortBy('id')"
                            )
                                | Hero
                                i(
                                    class="fas ml-2"
                                    :class="sortKey === 'id' ? (sortDirection === 'asc' ? 'fa-sort-up' : 'fa-sort-down') : 'fa-sort'"
                                )
                            th(
                                class="p-3 cursor-pointer"
                                @click="sortBy('win_rate')"
                            )
                                | Winrate
                                i(
                                    class="fas ml-2"
                                    :class="sortKey === 'win_rate' ? (sortDirection === 'asc' ? 'fa-sort-up' : 'fa-sort-down') : 'fa-sort'"
                                )
                            th(
                                class="p-3 cursor-pointer"
                                @click="sortBy('pick_rate')"
                            )
                                | Pickrate
                                i(
                                    class="fas ml-2"
                                    :class="sortKey === 'pick_rate' ? (sortDirection === 'asc' ? 'fa-sort-up' : 'fa-sort-down') : 'fa-sort'"
                                )
                            th(
                                class="p-3 cursor-pointer"
                                @click="sortBy('ban_rate')"
                            )
                                | Banrate
                                i(
                                    class="fas ml-2"
                                    :class="sortKey === 'ban_rate' ? (sortDirection === 'asc' ? 'fa-sort-up' : 'fa-sort-down') : 'fa-sort'"
                                )
                            th(class="p-3") 

                    tbody
                        template(x-for="hero in sortedHeroes" :key="hero._id")
                            tr(class="border-b border-gray-700 hover:bg-gray-700")
                                td(class="p-3 flex items-center")
                                    img(
                                        :src="hero.thumbnail"
                                        class="w-10 h-10 rounded-full mr-3"
                                    )
                                    span(x-text="hero.name")
                                td(class="p-3")
                                    span(x-text="`${hero.win_rate.toFixed(2)}%`")
                                td(class="p-3")
                                    span(x-text="`${hero.pick_rate.toFixed(2)}%`")
                                td(class="p-3")
                                    span(x-text="`${hero.ban_rate.toFixed(2)}%`")
                                td(class="p-3 space-x-2")
                                    button(
                                        @click="showHeroTrend(hero)"
                                        class="bg-green-500 text-white px-2 py-1 rounded text-sm"
                                        x-show="false" 
                                    ) Trends
                                    button(
                                        @click="compareHero(hero)"
                                        class="bg-blue-500 text-white px-2 py-1 rounded text-sm"
                                        x-show="false" 
                                    ) Compare

            // Hero Trend Modal
            div(
                x-show="selectedHeroTrend"
                x-cloak
                class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
            )
                div(class="bg-gray-800 p-6 rounded-lg w-11/12 max-w-4xl")
                    h2(
                        class="text-2xl mb-4"
                        x-text="selectedHeroTrend ? selectedHeroTrend.name + ' Trends' : ''"
                    )
                    // Trend Details - Show Change Here!
                    div(class="grid grid-cols-3 gap-4 mb-4")
                        div(class="bg-gray-700 p-4 rounded")
                            h3(class="font-bold mb-2") Winrate Change (Last #[span(x-text="dateRange")] days)
                            p(:class="{'text-green-400': selectedHeroTrend && selectedHeroTrend.winrateChange >= 0, 'text-red-400': selectedHeroTrend && selectedHeroTrend.winrateChange < 0}"
                               x-text="selectedHeroTrend ? `${selectedHeroTrend.winrateChange >= 0 ? '+' : ''}${selectedHeroTrend.winrateChange.toFixed(2)}%` : '-'")
                        div(class="bg-gray-700 p-4 rounded")
                            h3(class="font-bold mb-2") Pickrate Change (Last #[span(x-text="dateRange")] days)
                            p(:class="{'text-green-400': selectedHeroTrend && selectedHeroTrend.pickrateChange >= 0, 'text-red-400': selectedHeroTrend && selectedHeroTrend.pickrateChange < 0}"
                               x-text="selectedHeroTrend ? `${selectedHeroTrend.pickrateChange >= 0 ? '+' : ''}${selectedHeroTrend.pickrateChange.toFixed(2)}%` : '-'")
                        div(class="bg-gray-700 p-4 rounded")
                            h3(class="font-bold mb-2") Banrate Change (Last #[span(x-text="dateRange")] days)
                            p(:class="{'text-green-400': selectedHeroTrend && selectedHeroTrend.banrateChange >= 0, 'text-red-400': selectedHeroTrend && selectedHeroTrend.banrateChange < 0}"
                               x-text="selectedHeroTrend ? `${selectedHeroTrend.banrateChange >= 0 ? '+' : ''}${selectedHeroTrend.banrateChange.toFixed(2)}%` : '-'")

                    // Tabs for Charts
                    div(class="flex border-b border-gray-700 mb-4")
                        button(
                            @click="activeTrendTab = 'winrate'"
                            :class="{ 'border-b-2 border-blue-500 text-blue-400': activeTrendTab === 'winrate', 'text-gray-400 hover:text-white': activeTrendTab !== 'winrate' }"
                            class="py-2 px-4 focus:outline-none"
                        ) Winrate
                        button(
                            @click="activeTrendTab = 'pickrate'"
                            :class="{ 'border-b-2 border-orange-500 text-orange-400': activeTrendTab === 'pickrate', 'text-gray-400 hover:text-white': activeTrendTab !== 'pickrate' }"
                            class="py-2 px-4 focus:outline-none"
                        ) Pickrate
                        button(
                            @click="activeTrendTab = 'banrate'"
                            :class="{ 'border-b-2 border-red-500 text-red-400': activeTrendTab === 'banrate', 'text-gray-400 hover:text-white': activeTrendTab !== 'banrate' }"
                            class="py-2 px-4 focus:outline-none"
                        ) Banrate

                    // Chart Containers (hidden/shown by active tab)
                    div(class="relative h-64")
                        div(x-show="activeTrendTab === 'winrate'" x-transition:enter.duration.300ms)
                            canvas(id="winrateTrendChart")
                        div(x-show="activeTrendTab === 'pickrate'" x-transition:enter.duration.300ms)
                            canvas(id="pickrateTrendChart")
                        div(x-show="activeTrendTab === 'banrate'" x-transition:enter.duration.300ms)
                            canvas(id="banrateTrendChart")

                    button(
                        @click="closeHeroTrendModal()"
                        class="mt-4 bg-red-600 text-white px-4 py-2 rounded"
                    ) Close

            div(
                x-show="comparedHero"
                x-cloak
                class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
            )
                div(class="bg-gray-800 p-6 rounded-lg w-3/4")
                    h2(
                        class="text-2xl mb-4"
                        x-text="comparedHero ? 'Compare ' + comparedHero.name : ''"
                    )
                    // Comparison Filters
                    div(class="flex space-x-4 mb-4")
                        select(x-model="compareRank" class="bg-gray-700 text-white p-2 rounded")
                            option(value="All") All Ranks
                            option(value="Epic") Epic
                            option(value="Legend") Legend
                            option(value="Mythic") Mythic

                        select(x-model="compareDateRange" class="bg-gray-700 text-white p-2 rounded")
                            option(value="1") Last Day
                            option(value="3") Last 3 Days
                            option(value="7") Last 7 Days
                            option(value="14") Last 14 Days
                            option(value="30") Last 30 Days
                            option(value="90") Last 90 Days

                        button(
                            @click="performComparison()"
                            class="bg-blue-600 text-white px-4 py-2 rounded"
                        ) Compare

                    // Comparison Results
                    div(x-show="comparisonResults" class="grid grid-cols-2 gap-4")
                        div
                            h3(class="font-bold mb-2") Original Stats
                            p(x-text="`Winrate: ${comparedHero ? comparedHero.winrate.toFixed(2) : '-'}%`")
                            p(x-text="`Pickrate: ${comparedHero ? comparedHero.pickrate.toFixed(2) : '-'}%`")
                            p(x-text="`Banrate: ${comparedHero ? comparedHero.banrate.toFixed(2) : '-'}%`")
                        div
                            h3(class="font-bold mb-2") Compared Stats
                            p(x-text="`Winrate: ${comparisonResults ? comparisonResults.winrate.toFixed(2) : '-'}%`")
                            p(x-text="`Pickrate: ${comparisonResults ? comparisonResults.pickrate.toFixed(2) : '-'}%`")
                            p(x-text="`Banrate: ${comparisonResults ? comparisonResults.banrate.toFixed(2) : '-'}%`")

                    button(
                        @click="comparedHero = null"
                        class="mt-4 bg-red-600 text-white px-4 py-2 rounded"
                    ) Close

        script(src="/js/alpine.js" defer)
        script(src="/js/axios.js")
        script(src="/js/mlbb_api.js")
        script.
            function heroStatsData() {
                return {
                    heroStats: [],
                    rank: 'All',
                    dateRange: '1',
                    sortKey: 'win_rate', 
                    sortDirection: 'desc',
                    selectedHeroTrend: null,
                    activeTrendTab: 'win_rate',
                    comparedHero: null,
                    compareRank: 'All',
                    compareDateRange: '7',
                    comparisonResults: null,
                    latestDate: null,
                    winrateTrendChartInstance: null,
                    pickrateTrendChartInstance: null,
                    banrateTrendChartInstance: null,

                    init() {
                        this.fetchHeroStats();
                        this.findLatestStat();
                    },

                    async findLatestStat(){
                        try {
                            const response = await fetch('/api/hero-stats/latest', {
                                method: 'GET',
                                headers: { 'Content-Type': 'application/json' },
                            });
                            const latestStat = await response.json();
                            this.latestDate = new Date(latestStat.date);
                        } catch (error) {
                            console.error('Failed to fetch latest stat:', error);
                            this.latestDate = null;
                        }
                    },

                    async fetchHeroStats() {
                        const response = await combineHeroData(this.rank, this.dateRange)

                        if(response.status == 200){
                            this.heroStats = response.data;
                        }else{
                            console.error('Failed to fetch hero stats:', error);
                        }
                    },

                    get sortedHeroes() {
                        return [...this.heroStats].sort((a, b) => {
                            const modifier = this.sortDirection === 'asc' ? 1 : -1;
                            return modifier * ((a[this.sortKey] || 0) - (b[this.sortKey] || 0));
                        });
                    },

                    sortBy(key) {
                        if (this.sortKey === key) {
                            this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';
                        } else {
                            this.sortKey = key;
                            this.sortDirection = 'desc';
                        }
                    },

                    async showHeroTrend(hero) {
                        try {
                            const response = await fetch(`/api/hero-trend/${hero._id}`, {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    rank: this.rank,
                                    dateRange: this.dateRange
                                })
                            });
                            const trendData = await response.json();

                            if (trendData.length === 0) {
                                console.warn('No trend data available for this hero in the selected range.');
                                this.selectedHeroTrend = { ...hero, winrateChange: 0, pickrateChange: 0, banrateChange: 0 };
                                this.$nextTick(() => {
                                    this.destroyTrendCharts(); 
                                });
                                return;
                            }

                            trendData.sort((a, b) => new Date(a.date) - new Date(b.date));

                            const latestStat = trendData[trendData.length - 1];
                            const earliestStat = trendData[0];

                            const winrateChange = (latestStat.winrate || 0) - (earliestStat.winrate || 0);
                            const pickrateChange = (latestStat.pickrate || 0) - (earliestStat.pickrate || 0);
                            const banrateChange = (latestStat.banrate || 0) - (earliestStat.banrate || 0);

                            this.selectedHeroTrend = {
                                ...hero,
                                winrateChange: winrateChange,
                                pickrateChange: pickrateChange,
                                banrateChange: banrateChange,
                            };

                            const dates = trendData.map(stat => new Date(stat.date).toLocaleDateString());
                            const winrates = trendData.map(stat => stat.winrate || 0);
                            const pickrates = trendData.map(stat => stat.pickrate || 0);
                            const banrates = trendData.map(stat => stat.banrate || 0);

                            this.$nextTick(() => {
                                this.destroyTrendCharts();

                                const winrateCtx = document.getElementById('winrateTrendChart').getContext('2d');
                                this.winrateTrendChartInstance = new Chart(winrateCtx, {
                                    type: 'line',
                                    data: {
                                        labels: dates,
                                        datasets: [{
                                            label: 'Winrate',
                                            data: winrates,
                                            borderColor: 'rgb(75, 192, 192)',
                                            tension: 0.3,
                                            fill: false
                                        }]
                                    },
                                    options: this.getChartOptions('Winrate (%)')
                                });

                                const pickrateCtx = document.getElementById('pickrateTrendChart').getContext('2d');
                                this.pickrateTrendChartInstance = new Chart(pickrateCtx, {
                                    type: 'line',
                                    data: {
                                        labels: dates,
                                        datasets: [{
                                            label: 'Pickrate',
                                            data: pickrates,
                                            borderColor: 'rgb(255, 159, 64)',
                                            tension: 0.3,
                                            fill: false
                                        }]
                                    },
                                    options: this.getChartOptions('Pickrate (%)')
                                });

                                const banrateCtx = document.getElementById('banrateTrendChart').getContext('2d');
                                this.banrateTrendChartInstance = new Chart(banrateCtx, {
                                    type: 'line',
                                    data: {
                                        labels: dates,
                                        datasets: [{
                                            label: 'Banrate',
                                            data: banrates,
                                            borderColor: 'rgb(255, 99, 132)',
                                            tension: 0.3,
                                            fill: false
                                        }]
                                    },
                                    options: this.getChartOptions('Banrate (%)')
                                });
                            });
                        } catch (error) {
                            console.error('Failed to fetch hero trend:', error);
                            this.selectedHeroTrend = null; 
                            this.destroyTrendCharts();
                        }
                    },

                    getChartOptions(yAxisText) {
                        return {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                x: {
                                    type: 'category', 
                                    title: {
                                        display: true,
                                        text: 'Date',
                                        color: '#fff'
                                    },
                                    ticks: {
                                        color: '#fff'
                                    },
                                    grid: {
                                        color: 'rgba(255, 255, 255, 0.1)'
                                    }
                                },
                                y: {
                                    title: {
                                        display: true,
                                        text: yAxisText,
                                        color: '#fff'
                                    },
                                    ticks: {
                                        color: '#fff'
                                    },
                                    grid: {
                                        color: 'rgba(255, 255, 255, 0.1)'
                                    }
                                }
                            },
                            plugins: {
                                legend: {
                                    labels: {
                                        color: '#fff'
                                    }
                                },
                            }
                        };
                    },

                    destroyTrendCharts() {
                        if (this.winrateTrendChartInstance) {
                            this.winrateTrendChartInstance.destroy();
                            this.winrateTrendChartInstance = null;
                        }
                        if (this.pickrateTrendChartInstance) {
                            this.pickrateTrendChartInstance.destroy();
                            this.pickrateTrendChartInstance = null;
                        }
                        if (this.banrateTrendChartInstance) {
                            this.banrateTrendChartInstance.destroy();
                            this.banrateTrendChartInstance = null;
                        }
                    },

                    closeHeroTrendModal() {
                        this.selectedHeroTrend = null;
                        this.destroyTrendCharts();
                    },

                    async compareHero(hero) {
                        this.comparedHero = hero;
                    },

                    async performComparison() {
                        try {
                            const response = await fetch(`/api/hero-compare/${this.comparedHero._id}`, {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    originalRank: this.rank,
                                    originalDateRange: this.dateRange,
                                    compareRank: this.compareRank,
                                    compareDateRange: this.compareDateRange
                                })
                            });
                            this.comparisonResults = await response.json();
                        } catch (error) {
                            console.error('Failed to compare hero:', error);
                            this.comparisonResults = null;
                        }
                    }
                };
            }